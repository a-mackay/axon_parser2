use std::str::FromStr;
use crate::ast::{Def, Expr, ExprOrStmt, Id, Lambda, Lines, Lit, Param, Stmt};

grammar;

pub Def: Def = {
    <id:Id> ":" <e:Expr> => Def::new(id, e),
}

pub Do: Lines = {
    "do" <Lines> "end" => <>,
}


pub Expr: Expr = {
    Do => Expr::Do(<>),
    Id => Expr::Id(<>),
    Lambda => Expr::Lambda(<>),
    Lit => Expr::Lit(<>),
}

pub Lines: Lines = {
    <(<ExprOrStmt> ";"?)+> => Lines::new(<>),
}

pub Lambda: Lambda = {
    "(" ")" "=>" <ExprOrStmt> => Lambda::new_no_args(Lines::new_from_eos(<>)),
    <id:Id> "=>" <eos:ExprOrStmt> => {
        let param = Param::new(id);
        Lambda::new(vec![param], Lines::new_from_eos(eos))
    },
    "(" <first_param:Param> <params:("," <Param>)*> ")" "=>" <eos:ExprOrStmt> => {
        let mut params = params;
        params.insert(0, first_param);
        Lambda::new(params, Lines::new_from_eos(eos))
    },
}

pub Lit: Lit = {
    "null" => Lit::Null,
    "true" => Lit::Bool(true),
    "false" => Lit::Bool(false),
    Num => Lit::Num(<>),
}

pub Param: Param = {
    <id:Id> ":" <e:Expr> => Param::new_with_default_arg(id, e),
    Id => Param::new(<>),
}

pub Stmt: Stmt = {
    Def => Stmt::Def(<>),
}

ExprOrStmt: ExprOrStmt = {
    Expr => ExprOrStmt::Expr(<>),
    Stmt => ExprOrStmt::Stmt(<>),
}

Id: Id = {
    r"[a-z]([a-zA-Z0-9_])*" => Id::new(<>),
}

Num: f64 = {
    r"-?\d+(\.\d+)?" => f64::from_str(<>).unwrap(),
}